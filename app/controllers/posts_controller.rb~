class PostsController < ApplicationController
  include ApplicationHelper
  include PostsHelper
  load_and_authorize_resource
  skip_load_and_authorize_resource :only => [:destroy_comment, :like]
  before_action :set_owner_of_wall, except: [:destroy, :destroy_comment, :show]
  before_action :set_post_and_owner, only: [:destroy, :show]
  before_action :set_post_and_last_page, only: [:index, :all]
  POSTS_PER_PAGE = 15

  # GET /posts
  # GET /posts.json
  def index
    set_index_posts
  end
  
  # GET /all_posts
  # GET /all_posts.json
  def all
    post_owners = [current_user.id] + Friendship.where(:user2_id => current_user, :approved => true).pluck(:user1_id)
    @posts = Post.where('owner_id' => post_owners).order(created_at: :desc).page(params[:page]).per_page(POSTS_PER_PAGE)
  end

  # POST /posts
  # POST /posts.json
  def create
    if params[:post]
      @post = Post.new(post_params)
      @post.owner_id = @owner.id
      @post.author_id = current_user.id
      
      create_output_post
    else
      @comment = Comment.new(comment_params)
      @comment.user_id = current_user.id
      
      create_output_comment
    end
  end
  
  # PUT (:user_id/)posts(/:post_id/comments)/:id
  # PUT (:user_id/)posts(/:post_id/comments)/:id.json
  def like
    if params[:post_id]
      likeable = Comment.find(params[:id])
      what = "Comment"
    else
      likeable = Post.find(params[:id])
      what = "Post"
    end
    like = likeable.likes.where(:user_id => current_user.id).first || Like.new
    like = nil
    unless like.id
      like.likeable = likeable
      like.user = current_user
      like.save
      redirect_to back_page_post, flash: { :success => what + ' was liked.' }
    else
      like.destroy
      redirect_to back_page_post, flash: { :success => what + ' was unliked.' }
    end
  end
  
  # GET /posts/1
  # GET /posts/1.json
  def show
  end
  
  # DELETE /posts/1
  # DELETE /posts/1.json
  def destroy
    @post.destroy
    respond_to do |format|
      format.html { redirect_to back_page_post, flash: { :success => 'Post was successfully deleted.' } }
      format.json { head :no_content }
    end
  end
  
  # DELETE /posts/1/comment/1
  # DELETE /posts/1/comment/1.json
  def destroy_comment
    comment = Comment.find(params[:id])
    authorize! :destroy, comment
    comment.destroy
    respond_to do |format|
      format.html { redirect_to back_page_post, flash: { :success => 'Comment was successfully deleted.' } }
      format.json { head :no_content }
    end
  end
  
  private
  
  def set_owner_of_wall
    if params[:user_id]
      @owner = User.find(params[:user_id])
    else
      @owner = current_user
    end
  end
  
  def set_post_and_owner
    @post = Post.includes('owner').includes('author').find(params[:id])
    @owner = @post.owner
  end
  
  def set_post_and_last_page
    @post = Post.new
    @post.owner_id = @owner.id
    session[:last_post_page] = request.env['REQUEST_URI']
  end
  
  def set_index_posts
    @posts = Post.where('owner_id' => @owner.id).includes('owner').includes('author').order(created_at: :desc).page(params[:page]).per_page(POSTS_PER_PAGE)
  end
  
  # Never trust parameters from the scary internet, only allow the white list through.
  def post_params
    params[:post].permit(:text) if params[:post]
  end
  
  def comment_params
    params[:comment].permit(:text, :post_id) if params[:comment]
  end
  
  def create_output_post
    respond_to do |format|
      if @post.save
        format.html { redirect_to back_page_post, flash: { :success => 'Post was successfully added.' } }
        format.json { render :index, status: :created, location: @post }
      else
        set_index_posts
        format.html { render :index }
        format.json { render json: @post.errors, status: :unprocessable_entity }
      end
    end
  end
  
  def create_output_comment
    respond_to do |format|
      if @comment.save
        format.html { redirect_to back_page_post, flash: { :success => 'Comment was successfully added.' } }
        format.json { render :index, status: :created, location: @comment }
      else
        set_index_posts
        format.html { flash.now[:alert] = "Comment cannot be saved."
                      render :index }
        format.json { render json: @comment.errors, status: :unprocessable_entity }
      end
    end
  end
end
